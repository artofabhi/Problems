/**
 * 
 */
package com.abhi.mywork.algods.sortingd;

/**
 * @author abpurohit
 *
 */
public class HeapSort {

	private int[] arr = null ; 
	/**
	 * 
	 */
	
	private static int size = 0 ;
	public HeapSort(int[] arr) {
		
		if(arr == null || arr.length < 1)   {
			throw new IllegalArgumentException("wrong input size") ; 
		}
		
		this.arr = arr ; 
		size = arr.length-1 ;
	}
	
	
	

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		int[] arr = new int[] {5,6,2,3,8,4,9,0,1,7} ;
//		int[] arr = new int[] {8,4,9,0,1,7} ;
		HeapSort hSort = new HeapSort(arr) ; 
		
		for (int i = arr.length/2-1 ; i >= 0 ; i--) {
//			hSort.trickleDown(i) ; 
			hSort.heapify(i) ;
			
		}

		// print heap 
		
		// sort
		int size = hSort.arr.length ; 
		for (int i = hSort.arr.length-1 ; i >= 0 ; i-- ) {
//			int biggestValue = hSort.remove() ;
//			hSort.insert(biggestValue, i) ;
			int t = hSort.arr[0] ;
			hSort.arr[0] = hSort.arr[i] ;
			arr[i] = t ; 
			hSort.size-- ; 
			hSort.heapify(0) ;
		}
		 
	}


	
	private void heapify(int i) { 
		int l = 2*i + 1 ; 
		int r = l+1 ; 
		
		int largest = l ; 
		if (l < this.size && arr[l] > arr[i] ) {
			largest = l ; 
		} else {
			largest = i ; 
		}
		
		if (r < this.size && arr[r] > arr[largest]) {
			largest = r ; 
		}
		
		if (largest != i) {
			int t = arr[i] ; 
			arr[i] = arr[largest] ;
			arr[largest] = t ; 
			this.heapify(largest) ;
		}
		
	}

//
//	private void insert(int biggestValue, int indx) {
//		arr[indx] = biggestValue ;
//	}
//
//
//
//
// 
//	private int remove() {
//		int value =  arr[0] ;
//		arr[0] = arr[counter--] ;
//		this.trickleDown(0) ; 
//		return value ; 
//		
//		
//	}
//



//	private void trickleDown(int indx) {
//
//		// LOOP begin
//		// 1. find left and right child
//		// 2. find larger of left|right
//		// 3. store top (indx) 
//		// 4. swap larger child with top 
//		// LOOP ends
//		// 5. store top as larger (loop's last indx) 
//		
//		int top = this.arr[indx] ;
//		
//		while (indx < arr.length/2) { 
//
//			int left = indx*2 + 1 ; 
//			int right = indx*2+2 ; 
//			int larger = -1 ; 
//			int lVal = arr[left] ;
//			if (right < arr.length && lVal < arr[right]) {
//				larger = right ; 
//			} else {
//				larger = left ; 
//			}
//			int iVal = arr[indx] ;
//			int largerVal = arr[larger] ;
//			if (iVal >= largerVal) {
//				break ; 
//			}
//			arr[indx] = arr[larger] ; 
//			indx = larger ;
//			arr[indx] = top ;
//		}
//		
//		
////		arr[indx] = top ; // restore top
//	}
//	
//	
	

}
